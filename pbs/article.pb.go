// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: article.proto

package pbs

import (
	context "context"
	fmt "fmt"
	gogoproto "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

var E_GoprotoEnumPrefix = gogoproto.E_GoprotoEnumPrefix

var E_GoprotoEnumStringer = gogoproto.E_GoprotoEnumStringer

var E_EnumStringer = gogoproto.E_EnumStringer

var E_EnumCustomname = gogoproto.E_EnumCustomname

var E_Enumdecl = gogoproto.E_Enumdecl

var E_EnumvalueCustomname = gogoproto.E_EnumvalueCustomname

var E_GoprotoGettersAll = gogoproto.E_GoprotoGettersAll

var E_GoprotoEnumPrefixAll = gogoproto.E_GoprotoEnumPrefixAll

var E_GoprotoStringerAll = gogoproto.E_GoprotoStringerAll

var E_VerboseEqualAll = gogoproto.E_VerboseEqualAll

var E_FaceAll = gogoproto.E_FaceAll

var E_GostringAll = gogoproto.E_GostringAll

var E_PopulateAll = gogoproto.E_PopulateAll

var E_StringerAll = gogoproto.E_StringerAll

var E_OnlyoneAll = gogoproto.E_OnlyoneAll

var E_EqualAll = gogoproto.E_EqualAll

var E_DescriptionAll = gogoproto.E_DescriptionAll

var E_TestgenAll = gogoproto.E_TestgenAll

var E_BenchgenAll = gogoproto.E_BenchgenAll

var E_MarshalerAll = gogoproto.E_MarshalerAll

var E_UnmarshalerAll = gogoproto.E_UnmarshalerAll

var E_StableMarshalerAll = gogoproto.E_StableMarshalerAll

var E_SizerAll = gogoproto.E_SizerAll

var E_GoprotoEnumStringerAll = gogoproto.E_GoprotoEnumStringerAll

var E_EnumStringerAll = gogoproto.E_EnumStringerAll

var E_UnsafeMarshalerAll = gogoproto.E_UnsafeMarshalerAll

var E_UnsafeUnmarshalerAll = gogoproto.E_UnsafeUnmarshalerAll

var E_GoprotoExtensionsMapAll = gogoproto.E_GoprotoExtensionsMapAll

var E_GoprotoUnrecognizedAll = gogoproto.E_GoprotoUnrecognizedAll

var E_GogoprotoImport = gogoproto.E_GogoprotoImport

var E_ProtosizerAll = gogoproto.E_ProtosizerAll

var E_CompareAll = gogoproto.E_CompareAll

var E_TypedeclAll = gogoproto.E_TypedeclAll

var E_EnumdeclAll = gogoproto.E_EnumdeclAll

var E_GoprotoRegistration = gogoproto.E_GoprotoRegistration

var E_MessagenameAll = gogoproto.E_MessagenameAll

var E_GoprotoSizecacheAll = gogoproto.E_GoprotoSizecacheAll

var E_GoprotoUnkeyedAll = gogoproto.E_GoprotoUnkeyedAll

var E_GoprotoGetters = gogoproto.E_GoprotoGetters

var E_GoprotoStringer = gogoproto.E_GoprotoStringer

var E_VerboseEqual = gogoproto.E_VerboseEqual

var E_Face = gogoproto.E_Face

var E_Gostring = gogoproto.E_Gostring

var E_Populate = gogoproto.E_Populate

var E_Stringer = gogoproto.E_Stringer

var E_Onlyone = gogoproto.E_Onlyone

var E_Equal = gogoproto.E_Equal

var E_Description = gogoproto.E_Description

var E_Testgen = gogoproto.E_Testgen

var E_Benchgen = gogoproto.E_Benchgen

var E_Marshaler = gogoproto.E_Marshaler

var E_Unmarshaler = gogoproto.E_Unmarshaler

var E_StableMarshaler = gogoproto.E_StableMarshaler

var E_Sizer = gogoproto.E_Sizer

var E_UnsafeMarshaler = gogoproto.E_UnsafeMarshaler

var E_UnsafeUnmarshaler = gogoproto.E_UnsafeUnmarshaler

var E_GoprotoExtensionsMap = gogoproto.E_GoprotoExtensionsMap

var E_GoprotoUnrecognized = gogoproto.E_GoprotoUnrecognized

var E_Protosizer = gogoproto.E_Protosizer

var E_Compare = gogoproto.E_Compare

var E_Typedecl = gogoproto.E_Typedecl

var E_Messagename = gogoproto.E_Messagename

var E_GoprotoSizecache = gogoproto.E_GoprotoSizecache

var E_GoprotoUnkeyed = gogoproto.E_GoprotoUnkeyed

var E_Nullable = gogoproto.E_Nullable

var E_Embed = gogoproto.E_Embed

var E_Customtype = gogoproto.E_Customtype

var E_Customname = gogoproto.E_Customname

var E_Jsontag = gogoproto.E_Jsontag

var E_Moretags = gogoproto.E_Moretags

var E_Casttype = gogoproto.E_Casttype

var E_Castkey = gogoproto.E_Castkey

var E_Castvalue = gogoproto.E_Castvalue

var E_Stdtime = gogoproto.E_Stdtime

var E_Stdduration = gogoproto.E_Stdduration

var E_Wktpointer = gogoproto.E_Wktpointer

type ArticleId struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ArticleId) Reset()         { *m = ArticleId{} }
func (m *ArticleId) String() string { return proto.CompactTextString(m) }
func (*ArticleId) ProtoMessage()    {}
func (*ArticleId) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c593d380f9840a2, []int{0}
}
func (m *ArticleId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleId.Merge(m, src)
}
func (m *ArticleId) XXX_Size() int {
	return m.Size()
}
func (m *ArticleId) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleId.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleId proto.InternalMessageInfo

func (m *ArticleId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Articles struct {
	Data  []*Article `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Count int64      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Articles) Reset()         { *m = Articles{} }
func (m *Articles) String() string { return proto.CompactTextString(m) }
func (*Articles) ProtoMessage()    {}
func (*Articles) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c593d380f9840a2, []int{1}
}
func (m *Articles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Articles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Articles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Articles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Articles.Merge(m, src)
}
func (m *Articles) XXX_Size() int {
	return m.Size()
}
func (m *Articles) XXX_DiscardUnknown() {
	xxx_messageInfo_Articles.DiscardUnknown(m)
}

var xxx_messageInfo_Articles proto.InternalMessageInfo

func (m *Articles) GetData() []*Article {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Articles) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c593d380f9840a2, []int{2}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

// 分页通用参数
type PageParam struct {
	Page     int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (m *PageParam) Reset()         { *m = PageParam{} }
func (m *PageParam) String() string { return proto.CompactTextString(m) }
func (*PageParam) ProtoMessage()    {}
func (*PageParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c593d380f9840a2, []int{3}
}
func (m *PageParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageParam.Merge(m, src)
}
func (m *PageParam) XXX_Size() int {
	return m.Size()
}
func (m *PageParam) XXX_DiscardUnknown() {
	xxx_messageInfo_PageParam.DiscardUnknown(m)
}

var xxx_messageInfo_PageParam proto.InternalMessageInfo

func (m *PageParam) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *PageParam) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type Article struct {
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title" bson:"title"`
	Content     string `protobuf:"bytes,3,opt,name=content,proto3" json:"content" bson:"content"`
	ArticleType uint32 `protobuf:"varint,4,opt,name=article_type,json=articleType,proto3" json:"article_type" bson:"article_type"`
	CreatedAt   int64  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at" bson:"created_at"`
	UpdatedAt   int64  `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at" bson:"updated_at"`
	DeletedAt   int64  `protobuf:"varint,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at" bson:"deleted_at"`
	CoverImg    string `protobuf:"bytes,9,opt,name=cover_img,json=coverImg,proto3" json:"cover_img" bson:"cover_img"`
}

func (m *Article) Reset()         { *m = Article{} }
func (m *Article) String() string { return proto.CompactTextString(m) }
func (*Article) ProtoMessage()    {}
func (*Article) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c593d380f9840a2, []int{4}
}
func (m *Article) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Article) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Article.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Article) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Article.Merge(m, src)
}
func (m *Article) XXX_Size() int {
	return m.Size()
}
func (m *Article) XXX_DiscardUnknown() {
	xxx_messageInfo_Article.DiscardUnknown(m)
}

var xxx_messageInfo_Article proto.InternalMessageInfo

func (m *Article) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Article) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Article) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Article) GetArticleType() uint32 {
	if m != nil {
		return m.ArticleType
	}
	return 0
}

func (m *Article) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Article) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Article) GetDeletedAt() int64 {
	if m != nil {
		return m.DeletedAt
	}
	return 0
}

func (m *Article) GetCoverImg() string {
	if m != nil {
		return m.CoverImg
	}
	return ""
}

func init() {
	proto.RegisterType((*ArticleId)(nil), "pbs.ArticleId")
	proto.RegisterType((*Articles)(nil), "pbs.Articles")
	proto.RegisterType((*Empty)(nil), "pbs.Empty")
	proto.RegisterType((*PageParam)(nil), "pbs.PageParam")
	proto.RegisterType((*Article)(nil), "pbs.Article")
}

func init() { proto.RegisterFile("article.proto", fileDescriptor_5c593d380f9840a2) }

var fileDescriptor_5c593d380f9840a2 = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x3d, 0x8f, 0xd3, 0x30,
	0x18, 0xc7, 0x9b, 0xa6, 0x6f, 0xf1, 0xb5, 0x15, 0x98, 0x1b, 0x42, 0x0f, 0xe2, 0x62, 0xde, 0x3a,
	0x40, 0x2b, 0x1d, 0x03, 0x12, 0x42, 0x48, 0x0d, 0x30, 0x1c, 0x62, 0xa8, 0x7c, 0x30, 0x57, 0x79,
	0x31, 0xc1, 0x52, 0xd3, 0x44, 0x89, 0x7b, 0x52, 0xef, 0x53, 0x30, 0xf2, 0x91, 0x58, 0x90, 0x6e,
	0x64, 0xb2, 0x50, 0xbb, 0x65, 0xcc, 0xca, 0x82, 0xe2, 0xb8, 0x4d, 0x2b, 0x24, 0xa6, 0xf8, 0xff,
	0x7b, 0xfc, 0xfc, 0x1c, 0x3b, 0x0e, 0xe8, 0x39, 0x09, 0x67, 0xde, 0x82, 0x8e, 0xe3, 0x24, 0xe2,
	0x11, 0xd4, 0x63, 0x37, 0x1d, 0x3c, 0x0f, 0x18, 0xff, 0xba, 0x72, 0xc7, 0x5e, 0x14, 0x4e, 0x82,
	0x28, 0x88, 0x26, 0xb2, 0xe6, 0xae, 0xbe, 0xc8, 0x24, 0x83, 0x1c, 0x95, 0x3d, 0xf8, 0x0c, 0x18,
	0xd3, 0x52, 0x72, 0xe1, 0xc3, 0x3e, 0xa8, 0x33, 0xdf, 0xd4, 0x86, 0xda, 0xc8, 0x20, 0x75, 0xe6,
	0x63, 0x1b, 0x74, 0x54, 0x31, 0x85, 0x43, 0xd0, 0xf0, 0x1d, 0xee, 0x98, 0xda, 0x50, 0x1f, 0x9d,
	0x9c, 0x77, 0xc7, 0xb1, 0x9b, 0x8e, 0x55, 0x91, 0xc8, 0x0a, 0x3c, 0x05, 0x4d, 0x2f, 0x5a, 0x2d,
	0xb9, 0x59, 0x1f, 0x6a, 0x23, 0x9d, 0x94, 0x01, 0xb7, 0x41, 0xf3, 0x7d, 0x18, 0xf3, 0x35, 0x7e,
	0x0d, 0x8c, 0x99, 0x13, 0xd0, 0x99, 0x93, 0x38, 0x21, 0x84, 0xa0, 0x11, 0x3b, 0x01, 0x95, 0x6b,
	0xe9, 0x44, 0x8e, 0xe1, 0x19, 0x30, 0x8a, 0xe7, 0x3c, 0x65, 0xd7, 0x54, 0x39, 0x3a, 0x05, 0xb8,
	0x64, 0xd7, 0x14, 0xff, 0xd1, 0x41, 0x5b, 0x2d, 0x07, 0xc7, 0xd5, 0x6b, 0xda, 0x56, 0x26, 0x50,
	0x9d, 0xf9, 0xb9, 0x40, 0xa7, 0x6e, 0x1a, 0x2d, 0x5f, 0xe1, 0x39, 0xf3, 0x9f, 0x45, 0x21, 0xe3,
	0x54, 0x2e, 0x5a, 0x6c, 0x03, 0x4e, 0x40, 0x93, 0x33, 0xbe, 0x28, 0xa5, 0x86, 0x7d, 0x37, 0x13,
	0xa8, 0x04, 0xb9, 0x40, 0xdd, 0xb2, 0x4b, 0x46, 0x4c, 0x4a, 0x0c, 0x5f, 0x82, 0xb6, 0x17, 0x2d,
	0x39, 0x5d, 0x72, 0x53, 0x97, 0x2d, 0xf7, 0x33, 0x81, 0x76, 0x28, 0x17, 0xa8, 0x5f, 0x36, 0x29,
	0x80, 0xc9, 0xae, 0x04, 0x3f, 0x80, 0xae, 0xfa, 0x24, 0x73, 0xbe, 0x8e, 0xa9, 0xd9, 0x18, 0x6a,
	0xa3, 0x9e, 0xfd, 0x34, 0x13, 0xe8, 0x88, 0xe7, 0x02, 0xdd, 0x29, 0x15, 0x87, 0x14, 0x93, 0x13,
	0x15, 0x3f, 0xad, 0x63, 0x0a, 0x6d, 0x00, 0xbc, 0x84, 0x3a, 0x9c, 0xfa, 0x73, 0x87, 0x9b, 0xad,
	0xe2, 0x3c, 0xec, 0x87, 0x99, 0x40, 0x07, 0x34, 0x17, 0xe8, 0xb6, 0x7a, 0x95, 0x3d, 0xc3, 0xc4,
	0x50, 0x61, 0xca, 0x0b, 0xc7, 0x2a, 0xf6, 0x77, 0x8e, 0x76, 0xe5, 0xa8, 0x68, 0xe5, 0xa8, 0x18,
	0x26, 0x86, 0x0a, 0xa5, 0xc3, 0xa7, 0x0b, 0xaa, 0x1c, 0x9d, 0xca, 0x51, 0xd1, 0xca, 0x51, 0x31,
	0x4c, 0x0c, 0x15, 0xa6, 0x1c, 0xbe, 0x01, 0x86, 0x17, 0x5d, 0xd1, 0x64, 0xce, 0xc2, 0xc0, 0x34,
	0xe4, 0x91, 0x3e, 0xc8, 0x04, 0xaa, 0x60, 0x2e, 0xd0, 0xad, 0xdd, 0xa1, 0x2a, 0x84, 0x49, 0x47,
	0x8e, 0x2f, 0xc2, 0xe0, 0xfc, 0xa7, 0x06, 0xfa, 0xea, 0xeb, 0x5f, 0xd2, 0xe4, 0x8a, 0x79, 0x14,
	0x62, 0xd0, 0x7a, 0x2b, 0xf7, 0x09, 0x8f, 0xee, 0xe2, 0x00, 0xc8, 0x24, 0xaf, 0x1c, 0x7c, 0x0c,
	0x1a, 0x1f, 0x59, 0xca, 0x61, 0x5f, 0xb2, 0xfd, 0xed, 0x1b, 0xf4, 0x0e, 0x3b, 0xd2, 0x42, 0xf5,
	0x59, 0x6e, 0xf7, 0x3f, 0xaa, 0x47, 0xa0, 0xf5, 0x4e, 0x6e, 0x47, 0xc9, 0xf6, 0x3f, 0xcd, 0xd1,
	0xac, 0x27, 0xc5, 0x2c, 0xee, 0xb0, 0xc5, 0x3f, 0xb3, 0x8e, 0xcc, 0xf6, 0xbd, 0x1f, 0x1b, 0x4b,
	0xbb, 0xd9, 0x58, 0xda, 0xef, 0x8d, 0xa5, 0x7d, 0xdb, 0x5a, 0xb5, 0xef, 0x5b, 0xab, 0x76, 0xb3,
	0xb5, 0x6a, 0xbf, 0xb6, 0x56, 0x6d, 0x56, 0x73, 0x5b, 0xf2, 0xe7, 0x7c, 0xf1, 0x37, 0x00, 0x00,
	0xff, 0xff, 0xa0, 0xf6, 0xf5, 0x48, 0xe1, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArticleServiceClient is the client API for ArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArticleServiceClient interface {
	Create(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Empty, error)
	List(ctx context.Context, in *PageParam, opts ...grpc.CallOption) (*Articles, error)
	Update(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Empty, error)
	Delete(ctx context.Context, in *ArticleId, opts ...grpc.CallOption) (*Empty, error)
	Detail(ctx context.Context, in *ArticleId, opts ...grpc.CallOption) (*Article, error)
}

type articleServiceClient struct {
	cc *grpc.ClientConn
}

func NewArticleServiceClient(cc *grpc.ClientConn) ArticleServiceClient {
	return &articleServiceClient{cc}
}

func (c *articleServiceClient) Create(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pbs.ArticleService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) List(ctx context.Context, in *PageParam, opts ...grpc.CallOption) (*Articles, error) {
	out := new(Articles)
	err := c.cc.Invoke(ctx, "/pbs.ArticleService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Update(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pbs.ArticleService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Delete(ctx context.Context, in *ArticleId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pbs.ArticleService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleServiceClient) Detail(ctx context.Context, in *ArticleId, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/pbs.ArticleService/Detail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServiceServer is the server API for ArticleService service.
type ArticleServiceServer interface {
	Create(context.Context, *Article) (*Empty, error)
	List(context.Context, *PageParam) (*Articles, error)
	Update(context.Context, *Article) (*Empty, error)
	Delete(context.Context, *ArticleId) (*Empty, error)
	Detail(context.Context, *ArticleId) (*Article, error)
}

// UnimplementedArticleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedArticleServiceServer struct {
}

func (*UnimplementedArticleServiceServer) Create(ctx context.Context, req *Article) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedArticleServiceServer) List(ctx context.Context, req *PageParam) (*Articles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedArticleServiceServer) Update(ctx context.Context, req *Article) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedArticleServiceServer) Delete(ctx context.Context, req *ArticleId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedArticleServiceServer) Detail(ctx context.Context, req *ArticleId) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}

func RegisterArticleServiceServer(s *grpc.Server, srv ArticleServiceServer) {
	s.RegisterService(&_ArticleService_serviceDesc, srv)
}

func _ArticleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.ArticleService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Create(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.ArticleService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).List(ctx, req.(*PageParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.ArticleService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Update(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.ArticleService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Delete(ctx, req.(*ArticleId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleService_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbs.ArticleService/Detail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).Detail(ctx, req.(*ArticleId))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArticleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pbs.ArticleService",
	HandlerType: (*ArticleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ArticleService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ArticleService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ArticleService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ArticleService_Delete_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _ArticleService_Detail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article.proto",
}

func (m *ArticleId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintArticle(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Articles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Articles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Articles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintArticle(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArticle(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PageParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		i = encodeVarintArticle(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintArticle(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Article) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Article) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Article) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoverImg) > 0 {
		i -= len(m.CoverImg)
		copy(dAtA[i:], m.CoverImg)
		i = encodeVarintArticle(dAtA, i, uint64(len(m.CoverImg)))
		i--
		dAtA[i] = 0x4a
	}
	if m.DeletedAt != 0 {
		i = encodeVarintArticle(dAtA, i, uint64(m.DeletedAt))
		i--
		dAtA[i] = 0x40
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintArticle(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedAt != 0 {
		i = encodeVarintArticle(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if m.ArticleType != 0 {
		i = encodeVarintArticle(dAtA, i, uint64(m.ArticleType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintArticle(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintArticle(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintArticle(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintArticle(dAtA []byte, offset int, v uint64) int {
	offset -= sovArticle(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ArticleId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovArticle(uint64(l))
	}
	return n
}

func (m *Articles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovArticle(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovArticle(uint64(m.Count))
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PageParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovArticle(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovArticle(uint64(m.PageSize))
	}
	return n
}

func (m *Article) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovArticle(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovArticle(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovArticle(uint64(l))
	}
	if m.ArticleType != 0 {
		n += 1 + sovArticle(uint64(m.ArticleType))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovArticle(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovArticle(uint64(m.UpdatedAt))
	}
	if m.DeletedAt != 0 {
		n += 1 + sovArticle(uint64(m.DeletedAt))
	}
	l = len(m.CoverImg)
	if l > 0 {
		n += 1 + l + sovArticle(uint64(l))
	}
	return n
}

func sovArticle(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArticle(x uint64) (n int) {
	return sovArticle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ArticleId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArticle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArticle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Articles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Articles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Articles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArticle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Article{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArticle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArticle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArticle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Article) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Article: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Article: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArticle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArticle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArticle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArticleType", wireType)
			}
			m.ArticleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArticleType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			m.DeletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticle
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArticle
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArticle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthArticle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArticle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArticle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArticle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArticle
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArticle
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArticle
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArticle        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArticle          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArticle = fmt.Errorf("proto: unexpected end of group")
)
